<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>角色培养计算器</title>
  <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #3498db;
      --secondary: #2ecc71;
      --accent: #e74c3c;
      --dark: #2c3e50;
      --light: #ecf0f1;
      --border: #bdc3c7;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
      background: linear-gradient(135deg, #1a2a6c, #2c3e50);
      color: var(--light);
      line-height: 1.6;
      padding: 20px;
      min-height: 100vh;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
    }
    
    header {
      text-align: center;
      margin-bottom: 30px;
      padding: 20px;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 15px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    
    h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
      color: var(--secondary);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    .subtitle {
      font-size: 1.2rem;
      opacity: 0.9;
      max-width: 800px;
      margin: 0 auto;
    }
    
    .calculator-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 25px;
      margin-bottom: 30px;
    }
    
    .panel {
      background: rgba(44, 62, 80, 0.85);
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
      transition: transform 0.3s ease;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .panel:hover {
      transform: translateY(-5px);
    }
    
    .panel h2 {
      font-size: 1.8rem;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 2px solid var(--primary);
      color: var(--secondary);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .panel h2 i {
      color: var(--accent);
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--light);
    }
    
    input[type="number"],
    input[type="text"] {
      width: 100%;
      padding: 12px 15px;
      border-radius: 8px;
      border: 2px solid var(--border);
      background: rgba(0, 0, 0, 0.2);
      color: var(--light);
      font-size: 1rem;
    }
    
    input:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.3);
    }
    
    .radio-group {
      display: flex;
      gap: 20px;
      margin-top: 10px;
    }
    
    .radio-option {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    button {
      background: var(--primary);
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: all 0.3s ease;
      width: 100%;
      margin-top: 10px;
    }
    
    button:hover {
      background: #2980b9;
      transform: translateY(-2px);
    }
    
    .result-box {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 10px;
      padding: 20px;
      margin-top: 20px;
    }
    
    .result-value {
      font-size: 2rem;
      font-weight: 700;
      text-align: center;
      color: var(--secondary);
      margin: 15px 0;
    }
    
    .formula {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      padding: 15px;
      font-family: monospace;
      font-size: 1.1rem;
      margin-top: 15px;
    }
    
    .damage-components {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
      margin-top: 20px;
    }
    
    .component {
      background: rgba(0, 0, 0, 0.2);
      padding: 12px;
      border-radius: 8px;
      text-align: center;
    }
    
    .component-value {
      font-weight: 700;
      color: var(--primary);
      font-size: 1.2rem;
    }
    
    .reference {
      background: rgba(44, 62, 80, 0.85);
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
      margin-top: 30px;
    }
    
    .reference h2 {
      font-size: 1.8rem;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 2px solid var(--primary);
      color: var(--secondary);
    }
    
    .reference-content {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }
    
    .ref-item {
      background: rgba(0, 0, 0, 0.2);
      padding: 15px;
      border-radius: 10px;
    }
    
    .ref-item h3 {
      color: var(--accent);
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    @media (max-width: 768px) {
      .calculator-container {
        grid-template-columns: 1fr;
      }
      
      .damage-components {
        grid-template-columns: 1fr;
      }
      
      h1 {
        font-size: 2rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><i class="fas fa-calculator"></i> 角色培养伤害计算器</h1>
      <p class="subtitle">输入角色属性和天赋数据，实时计算伤害期望值，优化角色培养方案</p>
    </header>
    
    <div class="calculator-container">
      <!-- 角色属性面板 -->
      <section class="panel">
        <h2><i class="fas fa-user"></i> 角色属性</h2>
        <div class="form-group">
          <label for="base-atk">基础攻击力</label>
          <input type="number" id="base-atk" value="800" min="0" step="1">
        </div>
        <div class="form-group">
          <label for="crit-rate">暴击率 (%)</label>
          <input type="number" id="crit-rate" value="60" min="0" max="100" step="0.1">
        </div>
        <div class="form-group">
          <label for="crit-dmg">暴击伤害 (%)</label>
          <input type="number" id="crit-dmg" value="150" min="0" step="0.1">
        </div>
        <div class="form-group">
          <label for="dmg-bonus">伤害加成 (%)</label>
          <input type="number" id="dmg-bonus" value="46.6" min="0" step="0.1">
        </div>
        <div class="form-group">
          <label for="resistance">敌人抗性 (%)</label>
          <input type="number" id="resistance" value="10" min="0" max="100" step="1">
        </div>
      </section>
      
      <!-- 天赋设置面板 -->
      <section class="panel">
        <h2><i class="fas fa-magic"></i> 天赋设置</h2>
        <div class="form-group">
          <label>天赋等级</label>
          <div class="radio-group">
            <div class="radio-option">
              <input type="radio" id="talent-lv1" name="talent-level" value="1" checked>
              <label for="talent-lv1">1级</label>
            </div>
            <div class="radio-option">
              <input type="radio" id="talent-lv10" name="talent-level" value="10">
              <label for="talent-lv10">10级</label>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label for="skill-multiplier">技能倍率 (%)</label>
          <input type="number" id="skill-multiplier" value="250" min="0" step="0.1">
        </div>
        <div class="form-group">
          <label for="talent-bonus">天赋额外加成 (%)</label>
          <input type="number" id="talent-bonus" value="15" min="0" step="0.1">
        </div>
        <button id="calculate-btn"><i class="fas fa-bolt"></i> 计算伤害期望</button>
        <div class="result-box">
          <h3>伤害期望值</h3>
          <div class="result-value" id="damage-result">0</div>
          <div class="formula">
            伤害公式 = 基础攻击 × 技能倍率 × 暴击区 × 增伤区 × 抗性区
          </div>
        </div>
      </section>
      
      <!-- 伤害计算面板 -->
      <section class="panel">
        <h2><i class="fas fa-fire"></i> 伤害计算</h2>
        <div class="damage-components">
          <div class="component">
            <h3>基础攻击</h3>
            <div class="component-value" id="base-atk-value">800</div>
          </div>
          <div class="component">
            <h3>技能倍率</h3>
            <div class="component-value" id="multiplier-value">250%</div>
          </div>
          <div class="component">
            <h3>暴击区</h3>
            <div class="component-value" id="crit-value">1.90</div>
            <div>(1 + 暴击率 × 暴击伤害)</div>
          </div>
          <div class="component">
            <h3>增伤区</h3>
            <div class="component-value" id="dmg-bonus-value">1.616</div>
            <div>(1 + 伤害加成/100)</div>
          </div>
          <div class="component">
            <h3>抗性区</h3>
            <div class="component-value" id="resistance-value">0.90</div>
            <div>(1 - 抗性/100)</div>
          </div>
        </div>
        <div class="formula">
          <h3>详细计算过程</h3>
          <div id="calculation-steps">
            基础攻击: 800<br>
            技能倍率: 250%<br>
            暴击区: 1 + (0.6 × 1.5) = 1.90<br>
            增伤区: 1 + (61.6/100) = 1.616<br>
            抗性区: 1 - (10/100) = 0.90<br>
            总伤害 = 800 × 2.50 × 1.90 × 1.616 × 0.90 = 5,527
          </div>
        </div>
      </section>
    </div>
    
    <!-- 参考内容 -->
    <section class="reference">
      <h2><i class="fas fa-book"></i> 伤害计算参考</h2>
      <div class="reference-content">
        <div class="ref-item">
          <h3><i class="fas fa-info-circle"></i> 伤害计算公式</h3>
          <p>伤害期望 = 基础攻击 × (技能倍率/100) × [1 + (暴击率/100)×(暴击伤害/100)] × [1 + 伤害加成/100] × [1 - 抗性/100]</p>
        </div>
        <div class="ref-item">
          <h3><i class="fas fa-lightbulb"></i> 最优暴击比例</h3>
          <p>暴击率 : 暴击伤害 ≈ 1:2 时达到最佳伤害收益。例如：70%暴击率 + 140%暴击伤害</p>
        </div>
        <div class="ref-item">
          <h3><i class="fas fa-shield-alt"></i> 抗性减伤机制</h3>
          <p>当敌人抗性超过75%时，实际减伤效果会递减。计算公式：当抗性≥0时，减伤率 = 抗性/(抗性+500)</p>
        </div>
        <div class="ref-item">
          <h3><i class="fas fa-level-up-alt"></i> 天赋等级影响</h3>
          <p>天赋等级提升会显著增加技能倍率，10级天赋通常比1级天赋提升80%-150%的倍率</p>
        </div>
      </div>
    </section>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // 获取DOM元素
      const baseAtkInput = document.getElementById('base-atk');
      const critRateInput = document.getElementById('crit-rate');
      const critDmgInput = document.getElementById('crit-dmg');
      const dmgBonusInput = document.getElementById('dmg-bonus');
      const resistanceInput = document.getElementById('resistance');
      const skillMultiplierInput = document.getElementById('skill-multiplier');
      const talentBonusInput = document.getElementById('talent-bonus');
      const talentLevelRadios = document.querySelectorAll('input[name="talent-level"]');
      const damageResult = document.getElementById('damage-result');
      const calculateBtn = document.getElementById('calculate-btn');
      
      // 伤害组件值显示
      const baseAtkValue = document.getElementById('base-atk-value');
      const multiplierValue = document.getElementById('multiplier-value');
      const critValue = document.getElementById('crit-value');
      const dmgBonusValue = document.getElementById('dmg-bonus-value');
      const resistanceValue = document.getElementById('resistance-value');
      const calculationSteps = document.getElementById('calculation-steps');
      
      // 初始计算
      calculateDamage();
      
      // 添加事件监听器
      const inputs = document.querySelectorAll('input[type="number"], input[type="radio"]');
      inputs.forEach(input => {
        input.addEventListener('input', calculateDamage);
      });
      
      calculateBtn.addEventListener('click', calculateDamage);
      
      // 伤害计算函数
      function calculateDamage() {
        // 获取输入值
        const baseAtk = parseFloat(baseAtkInput.value) || 0;
        const critRate = Math.min(parseFloat(critRateInput.value) || 0, 100) / 100; // 转换为小数
        const critDmg = parseFloat(critDmgInput.value) || 0;
        const dmgBonus = parseFloat(dmgBonusInput.value) || 0;
        const resistance = Math.min(parseFloat(resistanceInput.value) || 0, 100);
        const skillMultiplier = parseFloat(skillMultiplierInput.value) || 0;
        const talentBonus = parseFloat(talentBonusInput.value) || 0;
        
        // 获取选中的天赋等级
        let talentLevel = 1;
        talentLevelRadios.forEach(radio => {
          if (radio.checked) talentLevel = parseInt(radio.value);
        });
        
        // 计算各部分的值
        const multiplier = skillMultiplier / 100; // 转换为倍数
        const totalDmgBonus = (dmgBonus + talentBonus) / 100; // 转换为小数
        const critFactor = 1 + (critRate * (critDmg / 100)); // 暴击区
        const resistFactor = 1 - (resistance / 100); // 抗性区
        
        // 计算总伤害
        const damage = baseAtk * multiplier * critFactor * (1 + totalDmgBonus) * resistFactor;
        
        // 更新显示值
        damageResult.textContent = Math.round(damage).toLocaleString();
        baseAtkValue.textContent = baseAtk;
        multiplierValue.textContent = skillMultiplier + '%';
        critValue.textContent = critFactor.toFixed(3);
        dmgBonusValue.textContent = (1 + totalDmgBonus).toFixed(3);
        resistanceValue.textContent = resistFactor.toFixed(3);
        
        // 更新详细计算步骤
        calculationSteps.innerHTML = `
          基础攻击: ${baseAtk}<br>
          技能倍率: ${skillMultiplier}%<br>
          暴击区: 1 + (${critRate.toFixed(2)} × ${(critDmg/100).toFixed(2)}) = ${critFactor.toFixed(3)}<br>
          增伤区: 1 + (${(dmgBonus + talentBonus).toFixed(1)}/100) = ${(1 + totalDmgBonus).toFixed(3)}<br>
          抗性区: 1 - (${resistance}/100) = ${resistFactor.toFixed(3)}<br>
          总伤害 = ${baseAtk} × ${multiplier.toFixed(3)} × ${critFactor.toFixed(3)} × ${(1 + totalDmgBonus).toFixed(3)} × ${resistFactor.toFixed(3)} = ${Math.round(damage).toLocaleString()}
        `;
      }
    });
  </script>
</body>
</html>
